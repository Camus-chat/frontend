name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout config repository
        uses: actions/checkout@v4
        with:
          repository: Camus-chat/config
          path: config
          token: ${{ secrets.GH_PAT }}

      - name: Copy .env file
        run: cp config/frontend/.env .env

      - name: Build Docker image
        run: |
          docker build -t camus-frontend:latest .

      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ECR_URL: ${{ secrets.AWS_ECR_URL }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ECR_URL

      - name: Tag & Push Docker image to ECR
        env:
          ECR_REPO_URI: ${{ secrets.AWS_ECR_URL }}/camus-fe
        run: |
          docker tag camus-frontend:latest $ECR_REPO_URI:latest
          docker push $ECR_REPO_URI:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      ECR_REPO_URI: ${{ secrets.AWS_ECR_URL }}/camus-fe

    steps:
      - name: Add GitHub Actions IP
        run: |
          aws ec2 authorize-security-group-ingress \
          --group-id ${{ secrets.SECURITY_GROUP_ID }} \
          --protocol tcp \
          --port 22 \
          --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Deploy Docker container to EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            docker pull $ECR_REPO_URI:latest
            docker stop frontend || true
            docker rm frontend || true
            docker run -d -p 3000:3000 --name frontend $ECR_REPO_URI:latest

      - name: Remove GitHub Actions IP
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
              --group-id ${{ secrets.SECURITY_GROUP_ID }} \
              --protocol tcp \
              --port 22 \
              --cidr ${{ steps.ip.outputs.ipv4 }}/32